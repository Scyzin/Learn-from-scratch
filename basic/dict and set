# dict (key and value)
d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
d['Jack'] = 90 #一个key只能对应一个value，后面的值会把前面的值冲掉
'Thomas' in d   #通过in 判断key是否存在
d.get('Thomas')    #通过dict提供的get方法，返回none时，python不显示结果
d.pop('Bob')      #删除一个key
#dict的优点
#1.查找和插入的速度极快，不会随着key的增加而变慢；
#2.需要占用大量的内存，内存浪费多。     key必须为不可变对象。
#最常用的key是字符串对象
#set 是key的组合，不能重复。需要提供list作为输入集合
s=set([1,2,3])
s.add(4)    #添加元素到set，重复添加无效果
s.remove(4)     #通过remove可以删除元素
a = ['c', 'b', 'a']
a.sort()
print(a)    #list操作时，内部的内容是会变化的。
#>>> a = 'abc'
# >>> b.replace('a', 'A')
# 'Abc'
# >>> a,b
#'abc','Abc'
# 对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。
# 相反，这些方法会创建新的对象并返回，
# 这样，就保证了不可变对象本身永远是不可变的。
#dict
d = {
    'Michael': 95,
    'Bob': 75,
    'Tracy': 85
}
print('d[\'Michael\'] =', d['Michael'])
print('d[\'Bob\'] =', d['Bob'])
print('d[\'Tracy\'] =', d['Tracy'])
print('d.get(\'Thomas\', -1) =', d.get('Thomas', -1))
#tuple是不变对象

t=(1,2,3)   #dict 和 set都是可变的。
d={t:20}
print(d)
t=(1,[2,3])     #d这个tuple是可变的，ict 和 set都不可用
s=set(t)        #tuple存放的对象不可怕，但list指向的对象可变
print(s)

